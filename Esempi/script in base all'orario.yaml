# versione 1: molto semplice, poco da dire
selettore1_script:
  alias: selettore1 script
  sequence:
    - service_template: >
        {% if states('sensor.time') < '12:00' %}
          script.script_a
        {% else %}
          script.script_b
        {% endif %}

# versione 2: l'ora viene salvata in una variabile (current_time) e la condizione di if
# viene controllata su quella. Più interessante perchè puoi mettere come in questo caso anche un doppio controllo
# (maggiore e minore). Ovviamente puoi anche metterne uno solo {% if current_time  < '12:00' %}
selettore2_script:
  alias: selettore2 script
  sequence:
    - service_template: >
        {% set current_time = states('sensor.time') %}
        {% if '08:01' < current_time  < '12:00' %}
          script.script_a
        {% else %}
          script.script_b
        {% endif %}

script_a:
  alias: script a
  sequence:
    - service: notify.notifiche_u
      data_template:
        title: '*Lancio script*'
        message: >
          "Eseguo script A"

script_b:
  alias: script b
  sequence:
    - service: notify.notifiche_u
      data_template:
        title: '*Lancio script*'
        message: >
          "Eseguo script B"
          
          
#  Ho fatto questa versione ma qualccsa non funziona...ora mi aspetterei che eseguisse  script.tv_sala_on visto che ho messo limite le 10 e invece esegue l'altro.
#  Ovviamente i test li faccio lacniando questo script da servizi per il momento. Domanda stupida... la variabile current_time HA la conosce già, vero?
#  Gli script singoli li ho già definiti però li ho anche ripetuti in questo che dovrebbe gestire il tutto in modo unitario

tv_sala_master:
  alias: tv_sala_master
  sequence:
    - service_template: >
        {% set current_time = states('sensor.time') %}
        {% if '08:01' < current_time  < '10:00' %}
          script.tv_sala_on_day
        {% else %}
          script.tv_sala_on
        {% endif %}

tv_sala_on_day:
  alias: 'TV SALA ON DAY'
  sequence:
   - service: switch.turn_on
     entity_id: switch.ciabatta
   - delay: 00:00:05 
   - service: remote.send_command
     data:
       entity_id: remote.rm_pro_sala_remote
       device: TV SALA
       command: Turn on
   - delay: 00:00:02
   - service: remote.send_command
     data:
        entity_id: remote.rm_pro_sala_remote
        device: SOUNDBAR
        command: Turn on
   - delay: 00:00:08
   - service: remote.send_command
     data:
         entity_id: remote.rm_pro_sala_remote
         device: SOUNDBAR
         command: Minus much
         num_repeats: 2
   - delay: 00:00:05
   - service: remote.send_command
     data:
         entity_id: remote.rm_pro_sala_remote
         device: SOUNDBAR
         command: Plus1
         num_repeats: 8
   - delay: 00:00:02
   - service: remote.send_command
     data:
         entity_id: remote.rm_pro_sala_remote
         device: DECODER
         command: SKY

tv_sala_on:
  alias: 'TV SALA ON'
  sequence:
   - service: switch.turn_on
     entity_id: switch.ciabatta
   - delay: 00:00:05 
   - service: remote.send_command
     data:
       entity_id: remote.rm_pro_sala_remote
       device: TV SALA
       command: Turn on
   - delay: 00:00:02
   - service: remote.send_command
     data:
        entity_id: remote.rm_pro_sala_remote
        device: SOUNDBAR
        command: Turn on
   - delay: 00:00:08
   - service: remote.send_command
     data:
         entity_id: remote.rm_pro_sala_remote
         device: SOUNDBAR
         command: Minus much
         num_repeats: 2
   - delay: 00:00:05
   - service: remote.send_command
     data:
         entity_id: remote.rm_pro_sala_remote
         device: SOUNDBAR
         command: Plus1
         num_repeats: 8
   - delay: 00:00:02
   - service: remote.send_command
     data:
         entity_id: remote.rm_pro_sala_remote
         device: DECODER
         command: SKY
   - delay: 00:00:02 
   - service: remote.send_command
     data:
        entity_id: remote.rm_pro_sala_remote
        device: LED DIVANO
        command: Turn on
          

